Instructions 2019.1

EmailSenderProgram is a fictitious application that sends mail to customers. Today two types of mail are sent; "Welcome mail" and "Come back mail". The idea is that the application runs every day as a scheduled job. When the run is finished, it is printed if it went well or badly.
You know that someday you will add more mail types.

Task 1 - Programming task (write code)
The code is not good, not in any way. It contains obvious bugs, some misconceptions and it is quite ugly written.

Your task is to make the code better and prepare it to be able to build on with more mail types!
I want easy-to-read, easy-to-understand and robust code that is easy to modify and build on. Write about the program and write down how you think, what shortcomings you have identified and how to attack the problem.
It is free to change the project except in DataLayer.cs.

Task 2 - Theoretical task (do not write code)
If you got a job writing a similar program from scratch, how did you design it? Describe how the architecture should look and if you would use some special techniques.


Answer : 
My approach would be same as I have done in this EmailSender project. I will use n-tier architecture.
I will create layers like BusinessModel/DomainModels, DataAccessLayer, Common (For common constants/enums and helper methods), BusinessServices, Api and then Our Client. 
I will use repository pattern and unitofwork. For me Dependency Injection and Global Exception handeling is a must.
I will definitely avoid loops. My priority is to use builtin extension methods like Foreach on List, prefer select instead of looping on a list. Variable names must be accurate and too the point. I focus on writing simple and easy code so that anyone can understand it. If I have to write comments for understanding, that is not good coding.
Dont Repeat yourself, You aint gonna need it (never write code for the future, you will never need it) focus should be on present tasks.
There is a saying writing code is 40%, 60% is managing the code.
So we must follow SOLID principle to manage code easily.

Clean code
Dependancy Injection
Non repeating code
Reusable code
avoiding loops
Exception Handling
using logger if neccessory etc...


